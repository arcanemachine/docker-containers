#!/usr/bin/bash

get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$( readlink "$SOURCE" )"
    # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}
dir_path=$(get_script_dir)


# get name of container
if [ "$1" == "" ]
then
  CONTAINER_NAME=bullseye-slim-1
else
  CONTAINER_NAME="$1"
fi

# check output of grep to see if we need to create the container first
docker ps -a | grep -q $CONTAINER_NAME

if [ $? == 0 ]
then
  # container exists
  echo "$CONTAINER_NAME exists. Let's check to see if it's running or not..."

  # check if the container is running
  docker ps -a --filter "status=running" | grep -q $CONTAINER_NAME
  
  if [ $? == 1 ]
  then
    # container is not running. let's start it...
    echo "$CONTAINER_NAME is not running. Starting it..."
    docker start $CONTAINER_NAME
  else
    echo "$CONTAINER_NAME is already running."
  fi


else
  # container does not yet exist
  read -p "Container doesn't exist. Create a new container? (Y/n): " CREATE_NEW

  if [ "$CREATE_NEW" != "n" ]
  then
    $dir_path/create $CONTAINER_NAME
  else
    echo "goodbye"
    exit 0
  fi

fi

# open a terminal session
echo "Opening a terminal session..."
docker exec -it $CONTAINER_NAME bash

echo "goodbye!"
